/** SWITCH MIXIN DEFINITION */
/**
 @param { Number } $size: The height of the switch element. It must have a length unit. It defaults to 32px.
 @param { Number } $spacing: The space between the circular ball and the switch container. It must have a length unit. It defaults to 2px. 
 @param { Number } $stretch-factor: A factor used to determine the extent to which the width of the switch element should be stretched. It must be a unitless number. It defaults to 1.625.
 @param { String } $color: The color of the switch when in active state. This must be a valid color value. Note that the circular ball is always white irrespective of this color.
 @param { String } $class: The base class for identifying the switch. This is used to dynamically create the state classes of the switch. It defaults to 'switch-toggle'. Hence, the default state classes are .switch-toggle--on and .switch-toggle--off. 
*/
/** SWITCH THEMES CREATION */
/**
* First parse the selector using `selector-parse`
* Extract the first selector in the first list using `nth` twice
* Extract the first simple selector using `simple-selectors` and `nth`
* Extract the class name using `str-slice`
* Examples:
* .class-1 .class-2, .class-3 .class-4, it returns class-1.
* .class-5.class-6 > .class-7.class-8, it returns class-5.

  $selector-parse function returns the list of the classes applied to $selector.
  $nth function the the nth item in a list.
  $simple-selectors returns a list of a compounded selector (i.e: simple-selectors(".foo.bar") => ".foo", ".bar")
  $str-slice get a substring of the string argument
*/
.switch.switch--default > .switch-toggle {
  height: 32px;
  width: 52px;
  cursor: pointer !important;
  user-select: none !important;
  position: relative !important;
  display: inline-block; }
  .switch.switch--default > .switch-toggle.switch-toggle--on::before, .switch.switch--default > .switch-toggle.switch-toggle--on::after, .switch.switch--default > .switch-toggle.switch-toggle--off::before, .switch.switch--default > .switch-toggle.switch-toggle--off::after {
    content: '';
    left: 0;
    position: absolute !important; }
  .switch.switch--default > .switch-toggle.switch-toggle--on::before, .switch.switch--default > .switch-toggle.switch-toggle--off::before {
    height: inherit;
    width: inherit;
    border-radius: 16px;
    will-change: background;
    transition: background .4s .3s ease-out; }
  .switch.switch--default > .switch-toggle.switch-toggle--on::after, .switch.switch--default > .switch-toggle.switch-toggle--off::after {
    top: 2px;
    height: 28px;
    width: 28px;
    border-radius: 14px;
    background: #ffffff !important;
    will-change: transform;
    transition: transform .4s ease-out; }
  .switch.switch--default > .switch-toggle.switch-toggle--on.switch-toggle--on::before, .switch.switch--default > .switch-toggle.switch-toggle--off.switch-toggle--on::before {
    background: #62c28e !important; }
  .switch.switch--default > .switch-toggle.switch-toggle--on.switch-toggle--on::after, .switch.switch--default > .switch-toggle.switch-toggle--off.switch-toggle--on::after {
    transform: translateX(22px); }
  .switch.switch--default > .switch-toggle.switch-toggle--on.switch-toggle--off::before, .switch.switch--default > .switch-toggle.switch-toggle--off.switch-toggle--off::before {
    background: #cccccc !important; }
  .switch.switch--default > .switch-toggle.switch-toggle--on.switch-toggle--off::after, .switch.switch--default > .switch-toggle.switch-toggle--off.switch-toggle--off::after {
    transform: translateX(2px); }

.switch.switch--graphite-small > .switch-toggle {
  height: 20px;
  width: 32.5px;
  cursor: pointer !important;
  user-select: none !important;
  position: relative !important;
  display: inline-block; }
  .switch.switch--graphite-small > .switch-toggle.switch-toggle--on::before, .switch.switch--graphite-small > .switch-toggle.switch-toggle--on::after, .switch.switch--graphite-small > .switch-toggle.switch-toggle--off::before, .switch.switch--graphite-small > .switch-toggle.switch-toggle--off::after {
    content: '';
    left: 0;
    position: absolute !important; }
  .switch.switch--graphite-small > .switch-toggle.switch-toggle--on::before, .switch.switch--graphite-small > .switch-toggle.switch-toggle--off::before {
    height: inherit;
    width: inherit;
    border-radius: 10px;
    will-change: background;
    transition: background .4s .3s ease-out; }
  .switch.switch--graphite-small > .switch-toggle.switch-toggle--on::after, .switch.switch--graphite-small > .switch-toggle.switch-toggle--off::after {
    top: 2px;
    height: 16px;
    width: 16px;
    border-radius: 8px;
    background: #ffffff !important;
    will-change: transform;
    transition: transform .4s ease-out; }
  .switch.switch--graphite-small > .switch-toggle.switch-toggle--on.switch-toggle--on::before, .switch.switch--graphite-small > .switch-toggle.switch-toggle--off.switch-toggle--on::before {
    background: grey !important; }
  .switch.switch--graphite-small > .switch-toggle.switch-toggle--on.switch-toggle--on::after, .switch.switch--graphite-small > .switch-toggle.switch-toggle--off.switch-toggle--on::after {
    transform: translateX(14.5px); }
  .switch.switch--graphite-small > .switch-toggle.switch-toggle--on.switch-toggle--off::before, .switch.switch--graphite-small > .switch-toggle.switch-toggle--off.switch-toggle--off::before {
    background: #cccccc !important; }
  .switch.switch--graphite-small > .switch-toggle.switch-toggle--on.switch-toggle--off::after, .switch.switch--graphite-small > .switch-toggle.switch-toggle--off.switch-toggle--off::after {
    transform: translateX(2px); }
