/** SWITCH MIXIN DEFINITION */

//DEFAULT COLOR VARIABLES

$ball-color: #ffffff;
$active-color: #62c28e;
$inactive-color: #cccccc;

//DEFAULT SIZING VARIABLES
$switch-size: 32px; 
$ball-spacing: 2px; 
$stretch-factor: 1.625;

//DEFAULT CLASS VARIABLE
$switch-class: 'switch-toggle';

/**
 @param { Number } $size: The height of the switch element. It must have a length unit. It defaults to 32px.
 @param { Number } $spacing: The space between the circular ball and the switch container. It must have a length unit. It defaults to 2px. 
 @param { Number } $stretch-factor: A factor used to determine the extent to which the width of the switch element should be stretched. It must be a unitless number. It defaults to 1.625.
 @param { String } $color: The color of the switch when in active state. This must be a valid color value. Note that the circular ball is always white irrespective of this color.
 @param { String } $class: The base class for identifying the switch. This is used to dynamically create the state classes of the switch. It defaults to 'switch-toggle'. Hence, the default state classes are .switch-toggle--on and .switch-toggle--off. 
*/

@mixin switch(
  $size: $switch-size, 
  $spacing: $ball-spacing, 
  $stretch: $stretch-factor, 
  $color: $active-color,
  $class: $switch-class) {

    //SELECTOR VARAIBLES
    $self: '.' + $class;
    $on: #{$self}--on;
    $off: #{$self}--off;

    //SWITCH VARIABLES
    $active-color: $color;
    $switch-size: $size;
    $ball-spacing: $spacing;
    $stretch-factor: $stretch;
    $ball-size: $switch-size - ($ball-spacing * 2);
    $ball-slide-size: ($switch_size * ($stretch-factor - 1) + $ball-spacing);

    //SWTICH STYLES
    height: $switch-size;
    width: $switch-size * $stretch-factor;
    cursor: pointer !important;
    user-select: none !important;
    position: relative !important;
    display: inline-block;

    &#{$on},
    &#{$off} {

      &::before, 
      &::after {
        content: '';
        left: 0;
        position: absolute !important;
      }

      &::before {
        height: inherit;
        width: inherit;
        border-radius: $switch-size / 2;
        will-change: background;
        transition: background .4s .3s ease-out;
      }

      &::after {
        top: $ball-spacing;
        height: $ball-size;
        width: $ball-size;
        border-radius: $ball-size / 2;
        background: $ball-color !important;
        will-change: transform;
        transition: transform .4s ease-out;
      }

      &#{$on} {
        &::before {
          background: $active-color !important;
        }

        &::after {
          transform: translateX($ball-slide-size);
        }
      }

      &#{$off} {
        &::before {
          background: $inactive-color !important;
        }

        &::after {
          transform: translateX($ball-spacing);
        }
      }

    }
  }

/** SWITCH THEMES CREATION */

/**
* First parse the selector using `selector-parse`
* Extract the first selector in the first list using `nth` twice
* Extract the first simple selector using `simple-selectors` and `nth`
* Extract the class name using `str-slice`
* Examples:
* .class-1 .class-2, .class-3 .class-4, it returns class-1.
* .class-5.class-6 > .class-7.class-8, it returns class-5.

  $selector-parse function returns the list of the classes applied to $selector.
  $nth function the the nth item in a list.
  $simple-selectors returns a list of a compounded selector (i.e: simple-selectors(".foo.bar") => ".foo", ".bar")
  $str-slice get a substring of the string argument
*/
@function get-switch-class($selector) {
  @return str-slice(nth(simple-selectors(nth(nth(selector-parse($selector),1),1)),1),2);
}

.switch {
  $self : &;
  $toggle: #{$self}-toggle;
  $class: get-switch-class($toggle);

  &#{$self}--default > #{$toggle} {
    @include switch($class: $class);
  }

  &#{$self}--graphite-small > #{$toggle} {
    @include switch($color: grey, $size: 20px, $class: $class);
  }
}